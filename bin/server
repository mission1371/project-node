#!/usr/bin/env node

var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var methodOverride = require('method-override');
var timeout = require('connect-timeout');

var port = process.env.PORT || 3000;

app.use(bodyParser.json());
app.use(bodyParser.json({type: 'application/vnd.api+json'}));
app.use(bodyParser.urlencoded({extended: true}));
app.use(methodOverride('X-HTTP-Method-Override'));
app.use(express.static(__dirname + '/public'));

// TODO
// app.use(timeout(2 * 1000));

var simpleServices = require('../routes/simpleOperations');
var averageServices = require('../routes/averageOperations');
var complexServices = require('../routes/complexOperations');

app.get("/", function (req, res) {
    return res.write("<h1> hello world </h1>");

});

/** ------------------- Simple Operations ------------------- **/
app.get('/v1/service/database/simple/createOperation', function (req, res) {
    var snap = new SnapshotSystem();
    simpleServices.createMessage(function (resp) {
        if (!req.timedout) {
            res.json(generateReturn(snap, resp));
        }
    });
});

app.get('/v1/service/database/simple/readOperation', function (req, res) {
    var snap = new SnapshotSystem();
    simpleServices.readMessages(function (resp) {
        if (!req.timedout) {
            res.json(generateReturn(snap, resp));
        }
    });
});

app.get('/v1/service/database/simple/updateOperation', function (req, res) {
    var snap = new SnapshotSystem();
    simpleServices.updateMessage(function (resp) {
        if (!req.timedout) {
            res.json(generateReturn(snap, resp));
        }
    });
});

app.get('/v1/service/database/simple/deleteOperation', function (req, res) {
    var snap = new SnapshotSystem();
    simpleServices.deleteMessage(function (resp) {
        if (!req.timedout) {
            res.json(generateReturn(snap, resp));
        }
    });
});


/** ------------------- Average Operations ------------------- **/
app.get('/v1/service/database/average/createOperation', function (req, res) {
    var snap = new SnapshotSystem();
    averageServices.createInvoice(function (resp) {
        if (!req.timedout) {
            res.json(generateReturn(snap, resp));
        }
    });
});

app.get('/v1/service/database/average/readOperation', function (req, res) {
    var snap = new SnapshotSystem();
    averageServices.readInvoice(function (resp) {
        if (!req.timedout) {
            res.json(generateReturn(snap, resp));
        }
    });
});

app.get('/v1/service/database/average/updateOperation', function (req, res) {
    var snap = new SnapshotSystem();
    averageServices.updateInvoice(function (resp) {
        if (!req.timedout) {
            res.json(generateReturn(snap, resp));
        }
    });
});

app.get('/v1/service/database/average/deleteOperation', function (req, res) {
    var snap = new SnapshotSystem();
    averageServices.deleteInvoice(function (resp) {
        if (!req.timedout) {
            res.json(generateReturn(snap, resp));
        }
    });
});


/** ------------------- Complex Operations ------------------- **/
app.get('/v1/service/database/complex/createOperation', function (req, res) {
    var snap = new SnapshotSystem();
    complexServices.createOperations(function (resp) {
        if (!req.timedout) {
            res.json(generateReturn(snap, resp));
        }
    });
});

app.get('/v1/service/database/complex/readOperation', function (req, res) {
    // var snap = new SnapshotSystem();
    // services.readRecords(function (resp) {
    //     if (!req.timedout) res.json(generateReturn(snap, resp));
    // });
    res.json({});
});

app.get('/v1/service/database/complex/updateOperation', function (req, res) {
    // var snap = new SnapshotSystem();
    // services.updateRecords(function (resp) {
    //     res.json(generateReturn(snap, resp));
    // });
    res.json({});
});

app.get('/v1/service/database/complex/deleteOperation', function (req, res) {
    // var snap = new SnapshotSystem();
    // services.deleteRecords(function (resp) {
    //     res.json(generateReturn(snap, resp));
    // });
    res.json({});
});

function generateReturn(preSnap, records) {

    // var mb = 1024 * 1024;

    var postSnap = new SnapshotSystem();
    var duration = postSnap.time - preSnap.time;
    // var used = (preSnap.freeMemory - postSnap.freeMemory) / mb;

    // console.log("final free memory --> " + (postSnap.freeMemory / mb));
    console.log("duration --> " + duration);


    var ret = {};
    ret.success = "true";
    ret.data = records;

    ret.duration = duration;
    // ret.used = used;
    // ret.cpuBefore = preSnap.cpu; //TODO
    // ret.cpuAfter = postSnap.cpu;

    return ret;
}

var SnapshotSystem = function () {

    this.time = new Date();
    // // this.cpu = os.cpus();
    // this.maxMemory = os.totalmem();
    // this.allocatedMemory = 0;
    // this.freeMemory = os.freemem();

};


app.listen(port);
console.log('Magic happens on port ' + port);

exports = module.exports = app;