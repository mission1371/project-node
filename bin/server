#!/usr/bin/env node

// modules =================================================
var express        = require('express');
var app            = express();
var bodyParser     = require('body-parser');
var methodOverride = require('method-override');

// configuration ===========================================


// config files
// var db = require('./config/db');

// set our port
var port = process.env.PORT || 3000;

// connect to our mongoDB database
// (uncomment after you enter in your own credentials in config/db.js)
// mongoose.connect(db.url);

// get all data/stuff of the body (POST) parameters
// parse application/json
app.use(bodyParser.json());

// parse application/vnd.api+json as json
app.use(bodyParser.json({ type: 'application/vnd.api+json' }));

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: true }));

// override with the X-HTTP-Method-Override header in the request. simulate DELETE/PUT
app.use(methodOverride('X-HTTP-Method-Override'));

// set the static files location /public/img will be /img for users
app.use(express.static(__dirname + '/public'));

// routes ==================================================
// require('./app/routes')(app); // configure our routes

// start app ===============================================
// startup our app at http://localhost:8080
app.listen(port);

// shoutout to the user
console.log('Magic happens on port ' + port);

var services = require('../routes/operations');
var os = require('os');

app.get("/", function (req, res) {
    return res.write("<h1> hello world </h1>");

});

app.get('/v1/service/database/createOperation', function(req, res) {
    var snap = new SnapshotSystem();
    services.createRecords(function (resp) {
        res.json(generateReturn(snap, resp));
    })
});

app.get('/v1/service/database/readOperation', function(req, res) {
    var snap = new SnapshotSystem();
    services.readRecords(function (resp) {
        res.json(generateReturn(snap, resp));
    });

});

app.get('/v1/service/database/updateOperation', function(req, res) {
    var snap = new SnapshotSystem();
    services.updateRecords(function (resp) {
        res.json(generateReturn(snap, resp));
    });

});

app.get('/v1/service/database/deleteOperation', function(req, res) {
    var snap = new SnapshotSystem();
    services.deleteRecords(function (resp) {
        res.json(generateReturn(snap, resp));
    });

});

function generateReturn(preSnap, records) {

    var mb = 1024 * 1024;

    var postSnap = new SnapshotSystem();
    console.log("final free memory --> " + (postSnap.freeMemory / mb));

    var duration = postSnap.time - preSnap.time;
    var used = (preSnap.freeMemory - postSnap.freeMemory) / mb;

    var ret = {};
    ret.success = "true";
    ret.data = records;

    ret.duration = duration;
    ret.used = used;
    ret.cpuBefore = preSnap.cpu; //TODO
    ret.cpuAfter = postSnap.cpu;

    return ret;
}

var SnapshotSystem = function () {

    this.time = new Date();
    // this.cpu = os.cpus();
    this.maxMemory = os.totalmem();
    this.allocatedMemory = 0;
    this.freeMemory = os.freemem();

};

// expose app
exports = module.exports = app;